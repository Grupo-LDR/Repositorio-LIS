include ../head 
- const examDate = new Date();
- let auth=true;

    div(class="container mt-5")
        div(class="row justify-content-center")
            div(class="col-12")
                div(class="rounded p-1 border ") 
                    h1 Administration Refer Value
                    p Date:  #{examDate.toLocaleDateString()} 
                    div(class="block")
                        table(class="table table-striped table-hoverdisplay display responsive nowrap justify-content-center" id="refValTable" )                    
                            thead(class="table-primary") #{titulo}
                                button(type="button" class="btn btn-primary m-4" id="btn_new_type")  New Reference Value
                                    tr

                                        td(class="text-center align-middle fs-6") #
                                        td(class="text-center align-middle fs-6") Sex
                                        td(class="text-center align-middle fs-6") Age min.
                                        td(class="text-center align-middle fs-6") Age max.
                                        td(class="text-center align-middle fs-6") Pregnant 
                                        td(class="text-center align-middle fs-6") Value min.
                                        td(class="text-center align-middle fs-6") Value max.
                                        td(class="text-center align-middle fs-6") Value ref. min.
                                        td(class="text-center align-middle fs-6") Value ref. max.
                                        td(class="text-center align-middle fs-6") Unit Value
                                        td(class="text-center align-middle fs-6") Observation                                               
                                        td(class="text-center align-middle fs-6") Administration

                                tbody()      
                                    if auth
                                        each e in examsRefValue              
                                            tr(id=`tr${e.id}` name="e_tr") 
                                                td #{e.id}
                                                td.text-center #{e.sex}
                                                td.text-center #{e.age_min}
                                                td.text-center #{e.age_max} 
                                                td.text-center #{e.pregnant} 
                                                td.text-center #{e.value_min}      
                                                td.text-center #{e.value_max}         
                                                td.text-center #{e.value_ref_min}
                                                td.text-center #{e.value_ref_max}                
                                                td.text-center #{e.unit_value}        
                                                td.texto-recortado #{e.observation}        
                                                    //- td #{e.create_at}        
                                                    //- td #{e.update_at}                    
                                                if auth 
                                                    td.text-center 
                                                        i(class="fa-solid fa-pen-to-square  px-2   userLink" name="e_edit" type="edit" sample_name=e.name elem=e.id id="edi"+e.id accion="editSample")
                                                        - const status = e.status == 1 ? 'fa-trash  trash-red' : 'fa-recycle trash-green';
                                                        i(class=`fa-solid  ${status}    px-2   userLink` name="e_delete" type="delete" elem=e.id id="del"+e.id accion="delSample") 

form(id="del_form" action="./refvalue" method="post" hidden)
    input(type="text" name="del" value="" hidden )  
include dialogReferenceValue


dialog(id="new_dialog" )
    form(id="new_form" action="./refvalue" method="post")
        h2 New Ref. Value
            hr
            label Name of Sample:
            sub Only words
            hr
            p
                input(type="text" id="new_name" name="name" pattern="^[A-Za-z0-9 \s]{3,30}" required title="Enter words with 3 to 30 characters, so they contain letters, numbers and spaces" )

            p    
                button(type="submit" formmethod="post" class="btn btn-primary m-4" onsubmit="false") Submit
                button(id="new_close" type="button" class="btn btn-secondary m-5") close
                button(id="new_reset" type="reset" class="btn btn-warning m-5") Reset

script.
    // dialogo new
    // captura boton nueva ref
    const openNewType = document.getElementById('btn_new_type');
    // captura  dialogo nueva ref
    const dialogNew = document.getElementById('new_dialog');
    // evento click nueva ref
    openNewType.addEventListener('click', () => {
        dialogNew.showModal();
    });
    // captura icono delete 
        const btnsElementDel = document.querySelectorAll('i[name="e_delete"]');
    // iteracion iconos delete
        btnsElementDel.forEach(function(icon) {
        icon.addEventListener('click', function() {
            // Captura el click en el icono
            const elemId = icon.getAttribute('elem');

            // Pide confirmación al usuario
            const confirmarEliminacion = confirm('¿Estás seguro de que deseas Modificar el estado de esta Muestra?');

            // Si el usuario acepta la confirmación, procede con la eliminación
            if (confirmarEliminacion) {
            // Captura el input para asignar el ID a la solicitud de eliminación
            const inputDelete = document.querySelector('input[name="del"]');
            inputDelete.value = elemId;

            // Envía el formulario de eliminación
            document.getElementById("del_form").submit();
            }
        });
        });


//-
    - let auth=true;
    body
    table
        thead #{titulo}
            hr
            tr 
                td #
                td Sex
                td Age min.
                td Age max.
                td Pregnant 
                td Value min.
                td Value max.
                td Value ref. min.
                td Value ref. max.
                td Unit Value
                td Observation        
                td Type Sample
                if auth
                    td Status

        each e in examsRefValue     

            tr 
                td #{e.id}
                td #{e.sex}
                td #{e.age_min}
                td #{e.age_max} 
                td #{e.pregnant} 
                td #{e.value_min}      
                td #{e.value_max}         
                td #{e.value_ref_min}
                td #{e.value_ref_max}                
                td #{e.unit_value}        
                td #{e.observation}        
                    //- td #{e.create_at}        
                    //- td #{e.update_at}                    
                td Type Sample
                    if auth 
                    td 
                        if e.status
                            p Activo
                        else 
                            p Inactivo   
//-

//-
    CREATE TABLE `exam_reference_values` (
        td #{e.id}
        td #{e.status}
        td #{e.sex}
        td #{e.age_min}
        td #{e.age_max}  
        td #{e.pregnant}        
        td #{e.value_max}        
        td #{e.value_min}        
        td #{e.value_ref_max}        
        td #{e.value_ref_min}        
        td #{e.unit_value}        
        td #{e.observation}        
        td #{e.create_at}        
        td #{e.update_at}
        \n datetime DEFAULT current_timestamp(),
        PRIMARY KEY (\nid\n) USING BTREE
    ) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci COMMENT='Tabla para registrar valores standard de estudios'

    //- include head 
    //-
//- sampletype 
    include ../head

    - const examDate = new Date();
    div(class="container mt-5")
        div(class="row justify-content-center")
            div(class="col-12")
                div(class="rounded p-1 border ") 
                    h1 Admin Sample Type
                    p Date:  #{examDate.toLocaleDateString()} 
                    div(class="block")
                        table(class="table table-striped table-hoverdisplay display responsive nowrap justify-content-center" id="orderTable" )                    
                            thead(class="table-primary")
                                button(type="button" class="btn btn-primary m-4" id="btn_new_type")  New Sample Type
                                    tr
                                        td(class="text-center align-middle fs-6") Name Sample
                                        td(class="text-center align-middle fs-6") Administration
                            tbody()      
                                each sample in samples
                                    tr(class="row-exam " id="tr#{sample.id}")
                                        //- td(class="text-center align-middle fs-6")  #{sample.id}
                                        td(class="text-center  align-middle  fs-6")  #{sample.id} , #{sample.name}
                                        td(class="text-center align-middle userEdit")
                                            i(class="fa-solid fa-pen-to-square  px-2   userLink" name="sample_edit" type="edit" sample_name=sample.name sample=sample.id id="edi"+sample.id accion="editSample")
                                            - const status = sample.status == 1 ? 'fa-trash  trash-red' : 'fa-recycle trash-green';
                                            //- <i class="fa-solid fa-recycle fa-beat-fade" style="color: #2d5c39;"></i>

                                            //- if sample.status==0
                                            i(class=`fa-solid  ${status}    px-2   userLink` name="sample_delete" type="delete" sample=sample.id id="del"+sample.id accion="delSample") 
                                            //- #{sample.status} #{status}
                                            //- td(class="text-center  align-middle  fs-6" name=""id=sample.id)  #{sample.id} , #{sample.name}
                                                td(class="text-center align-middle userEdit")
                                                    i(class="fa-solid fa-pen-to-square px-2   userLink" name="sample" type="edit" sample=sample.id id="edi"+sample.id accion="editSample")
                                                    i(class="fa-solid fa-trash fa-beat  px-2   userLink" name="sample" type="delete" sample=sample.id id="del"+sample.id accion="delSample")
    dialog(id="new_dialog")
        form(id="new_form" action="./sampletype" method="post")
            h2 New Sample Type
                hr
                label Name of Sample:
                sub Only words
                hr
                p
                    input(type="text" id="new_name" name="name" pattern="^[A-Za-z0-9 \s]{3,30}" required title="Enter words with 3 to 30 characters, so they contain letters, numbers and spaces" )

                p    
                    button(type="submit" formmethod="post" class="btn btn-primary m-4" onsubmit="false") Submit
                    button(id="new_close" type="button" class="btn btn-secondary m-5") close
                    button(id="new_reset" type="reset" class="btn btn-warning m-5") Reset

    dialog(id="edit_dialog")
        form(id="edit_form" action="./sampletype" method="post")
            h2 Edit Sample Type
                hr
                label Name:
                p
                    input(type="text" name="name" value="VALUE=VALUE" required id="edit_name")
                    input(type="text" name="edit" value="" hidden)
                    hr    
                    //- p    
                    button(type="submit" formmethod="post" class="btn btn-primary m-4") Submit
                    button(id="edit_close" type="button" class="btn btn-secondary m-5") close
                    button(id="edit_reset" type="reset" class="btn btn-warning m-5") Reset
    form(id="del_form" action="./sampletype" method="post" hidden)
        input(type="text" name="del" value="" )                                    
    //- script(src="/assets/js/sampleType.js" )    
    //- script(src="/assets/js/dialog.s")
    script.
        // dialogo new
        // captura boton nueva orden
        const openNewType = document.getElementById('btn_new_type');
        // captura  dialogo nueva orden
        const dialogNew = document.getElementById('new_dialog');
        // evento click nueva orden
        openNewType.addEventListener('click', () => {
            dialogNew.showModal();
        });
        // captura campo name para dialog new
        const newName = document.getElementById('new_name');
        // captura boton reset para new dialog
        const newReset = document.getElementById('new_reset');
        // captura botn cerrar para new dialog
        const newClose = document.getElementById('new_close');
        // evento boton cerrar new dialog
        newClose.addEventListener('click', (event) => {
            newName.removeAttribute('required');
            dialogNew.close();
        });

        // captura icono edit 
        const btnsSampleEdit = document.querySelectorAll('i[name="sample_edit"]');
        // iteracion iconos
            btnsSampleEdit.forEach(function(icon) {
                icon.addEventListener('click', function() {
                    // captura click en icono
                    const sampleId = icon.getAttribute('sample');
                    //console.log(sampleId);
                    // captura doalog edit
                    const dialogEdit = document.getElementById('edit_dialog');
                    dialogEdit.showModal();
                    // captura inpu par asihgnar id a post
                    const inputDialogEdit = document.querySelector('input[name="edit"]');
                    inputDialogEdit.value = sampleId;
                    // captura value sample_name ed sample (valor original)
                    const inputEditNameValue = icon.getAttribute('sample_name');
                    const inputEditSample = document.getElementById('edit_name');
                    inputEditSample.value = inputEditNameValue;
                    // captura btn cerrar 
                    const editClose = document.getElementById('edit_close');
                    editClose.addEventListener('click', function() {                   
                        inputEditSample.removeAttribute('required');                   
                        dialogEdit.close();
                    });
                });
            });

        // captura icono delete 
            const btnsElementDel = document.querySelectorAll('i[name="sample_delete"]');
        // iteracion iconos del
            btnsElementDel.forEach(function(icon) {
            icon.addEventListener('click', function() {
                // Captura el click en el icono
                const sampleId = icon.getAttribute('sample');

                // Pide confirmación al usuario
                const confirmarEliminacion = confirm('¿Estás seguro de que deseas Modificar el estado de esta Muestra?');

                // Si el usuario acepta la confirmación, procede con la eliminación
                if (confirmarEliminacion) {
                // Captura el input para asignar el ID a la solicitud de eliminación
                const inputDelete = document.querySelector('input[name="del"]');
                inputDelete.value = sampleId;

                // Envía el formulario de eliminación
                document.getElementById("del_form").submit();
                }
            });
            });